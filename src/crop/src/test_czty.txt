程序说明书：

由于之前的最小二乘法方法不好，所以换了一种最小二乘法来拟合直线
用了opencv自带的函数进行拟合

 
	void cv::fitLine(
		cv::InputArray points, // 二维点的数组或vector
		cv::OutputArray line, // 输出直线,Vec4f (2d)或Vec6f (3d)的vector
		int distType, // 距离类型
		double param, // 距离参数
		double reps, // 径向的精度参数
		double aeps // 角度精度参数
	);

第一个参数是用于拟合直线的输入点集，可以是二维点的cv::Mat数组，也可以是二维点的STL vector。
第二个参数是输出的直线，对于二维直线而言类型为cv::Vec4f，对于三维直线类型则是cv::Vec6f，输出参数的前半部分给出的是直线的方向，而后半部分给出的是直线上的一点（即通常所说的点斜式直线）。
第三个参数是距离类型，拟合直线时，要使输入点到拟合直线的距离和最小化（即下面公式中的cost最小化），可供选的距离类型如下表所示，ri表示的是输入的点到直线的距离。

第四个参数是距离参数，跟所选的距离类型有关，值可以设置为0，cv::fitLine()函数本身会自动选择最优化的值。
第五、六两个参数用于表示拟合直线所需要的径向和角度精度，通常情况下两个值均被设定为1e-2。
